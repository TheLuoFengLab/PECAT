#ifndef FSA_ALIGNMENT_GRAPH_HPP
#define FSA_ALIGNMENT_GRAPH_HPP


#include <cassert>
#include <vector>
#include <list>
#include <bitset>
#include <map>
#include <set>

#include "graph_utils.hpp"
#include "aligner.hpp"

namespace fsa {


class AlignmentGraph : public GraphUtils {
public:

    struct Node {
        Node() : links(5) {}
        uint16_t count{ 0 };
        double score{ 0 };
        const Link* best_link{ nullptr };

        std::vector<Link> links;

        void update_col(const Loc &curr, const Loc &prev, int seqid) {
            //LOG(INFO)("ucol in, (%d, %d, %d), (%d, %d, %d)", prev.col, prev.row, prev.base, curr.col, curr.row, curr.base);
            assert(seqid >=0 && seqid < MAX_COV );
            this->count += 1;

            if (prev.col < 0) return;
            if (curr.row > 0) {
                assert(prev.row == curr.row-1);
            //    LOG(INFO)(">0 %zd,", links.size());
                links[prev.base].count++;
                links[prev.base].seqs.set(seqid, true);
                links[prev.base].prev = prev;
                
            } else {
                assert(prev.row >= 0);
                while ((int)links.size() < (prev.row+1) * 5) {
                    links.push_back(Link());
                }
            //    LOG(INFO)("=0 %zd,", links.size());
                links[prev.row*5+prev.base].count++;
                links[prev.row*5+prev.base].seqs.set(seqid, true);
                links[prev.row*5+prev.base].prev = prev;

            }
            //LOG(INFO)("ucol out");
  
            // for (size_t kk = 0; kk < links.size(); kk++) {
            //     if (prev == links[kk].prev) {
            //         links[kk].count++;
            //         links[kk].seqs.set(seqid, true);
            //         updated = true;
            //         break;
            //     }
            // }

            // if (!updated) {
            //     links.push_back(Link());
            //     links.back().count = 1;
            //     links.back().prev = prev;
            //     links.back().seqs.set(seqid, true);
            // }
        }


    };

    struct NodeGroup {
        Node& operator [] (size_t i) {
            assert(0 <= i && i < 5);
            return base[i];
        }
        size_t Size() const { return 5; }
        Node base[5];
    };


    struct Column {
        Column() { rows.reserve(8); }
        NodeGroup& operator[] (size_t i) { return rows[i]; }
        size_t Size() const { return rows.size(); }
        void Extend(size_t sz) {
            //if (rows.size() < sz) {
            //    rows.insert(rows.end(), sz - rows.size(), {});
            //}
            while (rows.size() < sz) {
                rows.push_back({});
            }
        }

        std::vector<NodeGroup> rows;
        int coverage {0};
        double weight {0};
        std::bitset<MAX_COV> queries;

    };
    struct Score {
        int qid { -1 };
        int length { 0 };        
        int cross { 0 };         // number of positions where have 
        int t_in_cross { 0 };
        int q_in_cross { 0 };
        int q_t_one { 0 };
        int q_t_two { 0 };       //
        int distance { 0 };      // edit distance of two reads


        std::vector<const Link*> branches;

    };


    AlignmentGraph();
    
    Column& operator[] (size_t i) {
        return cols[i];
    }

    Node& operator[] (const Loc &loc) {
        return cols[loc.col][loc.row][loc.base];
    }
    void Build(const DnaSeq& target, const std::array<size_t,2> &range, const std::vector<Alignment> &aligned, const std::vector<int> &qids);

    void Clear();

    void Save(const std::string &fname) const;
    Loc Locate(const Node& node);

    Node* Get(const Loc& loc) {
        if (loc.col == -1) return nullptr;
        return &cols[loc.col].rows[loc.row].base[loc.base];
    }

    const Node* FindBestPath();
    void Reconstruct(const Node &end);
    void Consensus();

    const std::string& GetSequence() const { return sequence_; }

    void SetParameter(const std::string &name, const std::string &v);
    void SetParameter(const std::string &name, int v);
    void SetParameter(const std::string &name, double v);

    void ComputeScore();

    std::vector<const Link*> CollectLinks(size_t i);
    std::vector<const Link*> CollectLinks1(size_t i);
    std::vector<const Link*> CollectLinks2(size_t i);

protected:
    void AddTarget(const DnaSeq &target);
    void AddQuery(size_t qid, size_t query_start, const std::string &aligned_query,  size_t target_start, const std::string &aligned_target);
    double LinkScoreCount(size_t col, size_t row, const Link& link) { return link.count - cols[col].coverage*(branch_score_*4/(4+row)); } 
    double LinkScoreWeight(size_t col, size_t row, const Link& link);
protected:
    static DnaSerialTable2 Base2Num;

    std::vector<Column> cols;
    std::vector<const Link*> branches_;     // target每个base所在的分支，nullptr表示该base不在分支上
    std::vector<bool> branch_flags_;        // base是否有分支
    const DnaSeq* target_;
    std::array<size_t,2> range_;
    std::vector<std::array<int, 4>> ranges_;
    std::vector<Score> scores_;
    size_t window_size_ { 500 };
    double branch_score_ { 0.5 };
    int weight_base_ { 10 };

    std::string sequence_;
    double (AlignmentGraph::*LinkScore)(size_t, size_t, const Link&) { nullptr };
};


} // namespace fsa {
    
#endif // FSA_ALIGNMENT_GRAPH_HPP
