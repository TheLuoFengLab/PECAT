#include "alignment_graph2.hpp"

#include <stdlib.h>
#include <stdio.h>
#include <limits.h>
#include <string.h>
#include <stdint.h>
#include <fstream>
#include <unordered_set>

#include <algorithm>
#include <numeric>
#include "aligner.hpp"
#include "logger.hpp"

namespace fsa {

DnaSerialTable2 AlignmentGraph2::Base2Num;

AlignmentGraph2::AlignmentGraph2() {
}


void AlignmentGraph2::SetParameter(const std::string &name, const std::string &v) {
    if (name == "score") {
        if (v == "count") {
            LinkScore = &AlignmentGraph2::LinkScoreCount;
        } else if (v == "weight") {
            LinkScore = &AlignmentGraph2::LinkScoreWeight;
        } else {
            LOG(FATAL)("Not support score type: %s", v.c_str());
        }
    } else {
        LOG(FATAL)("Not support parameter: %s", name.c_str());

    }
}

void AlignmentGraph2::SetParameter(const std::string &name, int v) {
    LOG(FATAL)("Not support parameter: %s", name.c_str());
}

void AlignmentGraph2::SetParameter(const std::string &name, double v) {
    LOG(FATAL)("Not support parameter: %s", name.c_str());
}

void AlignmentGraph2::Build(const DnaSeq& target, const std::array<size_t,2> &range, const std::vector<Alignment> &aligned, const std::vector<int> &qids) {
    Clear();
    assert(aligned.size() == qids.size());
    AddTarget(target, range);
    scores_.reserve(aligned.size());
    range_ = range;

    for (size_t i=0; i<aligned.size(); ++i) {
        scores_.push_back(Score());
        AddQuery(scores_.size()-1, aligned[i].query_start, aligned[i].aligned_query, aligned[i].target_start, aligned[i].aligned_target);
        scores_.back().qid = qids[i];
        scores_.back().branches.assign(cols.size(), nullptr);
    }
    std::sort(tags_.begin(), tags_.end());

    int link_count = 0;
    size_t ics = 0;
    for (size_t ice=0; ice<tags_.size(); ++ice) {
        if (tags_[ics].curr.col == tags_[ice].curr.col) continue;
        BuildCol(ics, ice);
        ics = ice;
    }
    BuildCol(ics, tags_.size());

    //Dump("sss.csv", range[0], range[1]);

}


void AlignmentGraph2::BuildCol(size_t stag, size_t etag) {
    assert(stag < etag && etag <= tags_.size());
    size_t rowsize = tags_[etag-1].curr.row + 1;
    size_t icol = tags_[stag].curr.col;

    cols[icol].Reset(nodegroup_pool.Alloc(rowsize), rowsize);

    size_t s = stag;
    for (size_t i = s; i < etag; ++i) {
        if (tags_[i].curr.row == 0) {
            cols[icol].queries.set(tags_[i].id, true);
            cols[icol].coverage ++;
        }
        
        if (tags_[i].curr == tags_[s].curr) continue;

        BuildNode(s, i);
        s = i;
    } 
    BuildNode(s, etag);

    cols[icol].weight = 0;
    

}

void AlignmentGraph2::BuildNode(size_t stag, size_t etag) {
    assert(etag > stag);

    Node& node = (*this)[tags_[stag].curr];
    node.Reset();

    Link* links = link_pool.PreAlloc(100);

    size_t linksize = 0;
    links[linksize].Reset(tags_[stag].prev, tags_[stag].id);
    for (size_t i = stag+1; i < etag; ++i) {
        if (tags_[i].prev == links[linksize].prev) {
            links[linksize].seqs.set(tags_[i].id, true);
            links[linksize].count++;
        } else {
            linksize++;
            links[linksize].Reset(tags_[i].prev, tags_[i].id);
        }
        node.count ++;
    }

    node.links.reset(links, linksize+1);
    link_pool.Alloc(linksize+1);
}   

void AlignmentGraph2::Clear() {
    cols.clear();
    branches_.clear();
    branch_flags_.clear();
    target_ = nullptr;
    scores_.clear();
    sequence_.clear();
    nodegroup_pool.Clear();
    link_pool.Clear();
    tags_.clear();
}

void AlignmentGraph2::Save(const std::string &fname) const {
    std::ofstream out(fname);

    for (size_t i = 0; i < cols.size(); ++i) {
        for (size_t j = 0; j < cols[i].rows.size(); ++j) {
            for (size_t k = 0; k < 5; ++k) {
                const Node &node = cols[i].rows[j].base[k];

                const char* acgt = ".ACGT-";
                for (auto & link : node.links) {
                    out << i << " " << j << " " << k << " "
                        << link.prev.col << " " << link.prev.row << " " << (acgt+1)[link.prev.base] << " "
                        << link.count << "\n";

                }
            }
        }
    }
}

AlignmentGraph2::Segment AlignmentGraph2::FindBestPathBasedOnCount() {
    Segment seg;

    const Node* end = nullptr;
    double global_score = -1;

    for (size_t i = 0; i < cols.size(); i++) {
        
        for (size_t j = 0; j < cols[i].Size(); j++) {
            for (size_t k = 0; k < cols[i][j].Size(); k++) {

                Node &node = cols[i][j][k];
                
                node.SortLinks();

                for (const auto &link : node.links) {
                    if (link.count == 0) continue;
                    const Loc& prev = link.prev;
                    
                    const Node* pnode = Get(prev);
                    double pscore = pnode == nullptr ? 0 : pnode->score;

                    double score = LinkScoreCount(i, j, link) +  (prev.col == -1 ? 0 : cols[prev.col][prev.row][prev.base].score);

                    if (score > node.score) {
                        node.score = score;
                        node.best_link = &link;
                    }
                }

                if (node.score > global_score) {
                    global_score = node.score;
                    end = &node;
                    seg.end = {i, j, k};                       
                }
            }
        }
    }

    return seg;

}


AlignmentGraph2::Segment AlignmentGraph2::FindBestPathBasedOnWeight() {
    Segment seg;

    const Node* end = nullptr;
    double global_score = -1;

    ComputeSimilarity();
    
    // pre-compute
    for (size_t col = 0; col < cols.size(); col++) {
        cols[col].weight = 0;
        if (cols[col].queries[0]) cols[col].weight += 1;
        for (size_t i=0; i<scores_.size(); ++i) {
            if (cols[col].queries[i+1]) {
                cols[col].weight += (scores_[i].q_t_one + weight_base_)*1.0 / (scores_[i].cross + weight_base_);
            }
        }
    }

    for (size_t i = 0; i < cols.size(); i++) {
        for (size_t j = 0; j < cols[i].Size(); j++) {
            for (size_t k = 0; k < cols[i][j].Size(); k++) {

                Node &node = cols[i][j][k];
                
                for (const auto &link : node.links) {
                    
                    if (link.count == 0) continue;

                    Loc prev = link.prev;

                    double score = LinkScoreWeight(i, j, link) + (prev.col == -1 ? 0 : cols[prev.col][prev.row][prev.base].score);

                    if (score > node.score) {
                        node.score = score;
                        node.best_link = &link;
                    }
                }

                if (node.score > global_score) {
                    global_score = node.score;
                    end = &node;   
                    seg.end = {i, j, k};                         
                }
            }
        }
    }

    return seg;

}

void AlignmentGraph2::Reconstruct(const Node &end) {

    assert(sequence_.size() == 0);

    const Node *curr_node = &end;
    Loc loc = Locate(end);
    sequence_.reserve(int(cols.size()*1.2));

    
    while (loc.col >= 0) {
        char b = "ACGT-"[loc.base];

        if (b != '-') {
            sequence_ += b;
        }

        if (curr_node->best_link != nullptr) {
            loc = curr_node->best_link->prev;
            curr_node = Get(loc);
        }
        else {
            break;
        }
    }

    std::reverse(sequence_.begin(), sequence_.end());

}

void AlignmentGraph2::Reconstruct(const Node &end, std::vector<std::array<const Node*, 2>>& complex) {

}

std::string AlignmentGraph2::ReconstructSimple(const Loc &begin, const Loc &end) {
   
    std::string seq;
    const Node *curr_node = Get(end);
    Loc loc = end;

    while (loc.col >= 0 && loc != begin) {
        char b = "ACGT-"[loc.base];

        if (b != '-') {
            seq += b;
        }

        if (curr_node->best_link != nullptr) {
            loc = curr_node->best_link->prev;
            curr_node = Get(loc);
        }
        else {
            break;
        }
    }

    std::reverse(seq.begin(), seq.end());
    return seq;
}

std::string AlignmentGraph2::ReconstructComplex(const Loc &begin, const Loc &end) {
   
    std::string seq;


    return seq;
}

std::vector<AlignmentGraph2::Segment> AlignmentGraph2::SplitSegment(const Loc &end) {

    std::vector<Segment> segments;

    auto is_clear_node = [](const Node* n, int cov) {
        if (cov <= 10) return true;         // coverage偏少，则分为简单区域

        if (n->best_link == &n->links[0] && n->best_link->count >= cov / 2) {
            if (n->links.size() == 1 || n->links.size() > 1 && n->links[0].count / 2 >= n->links[1].count) {
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    };
    
    std::vector<Loc> traceback;
    std::vector<uint8_t> state; // 0 clear, 1 unclear


    const Node *curr_node = Get(end);
    Loc loc = end;
    while (loc.col >= 0) {
        traceback.push_back(loc);
        state.push_back(is_clear_node(curr_node, cols[loc.col].coverage)? 0 : 1);
 
        if (curr_node->best_link != nullptr) {
            loc = curr_node->best_link->prev;
            curr_node = Get(loc);
        } else {
            break;
        }
    }

    Segment seg;
    seg.end = traceback[0];
    seg.begin = {-1, -1, -1};
    seg.type = state[0];
    size_t startIndex = 0;

    size_t index = 0;
    while (index < traceback.size()) {

        if (seg.type == 0) {
            for (; index < traceback.size(); ++index) {
                if (state[index] == 0) continue;
                else break;
            }

            if (index < traceback.size()) {
                assert(state[index] == 1);
                
                // 寻找分割点
                int count = 0;
                size_t endIndex = index;
                for (; endIndex> startIndex; --endIndex) {
                    if (traceback[endIndex-1].row == 0) count ++;
                    if (count >= 3) break;
                }
                if (count >= 3) {
                    seg.begin = traceback[endIndex-1];
                    segments.push_back(seg);
                    seg.end = traceback[endIndex-1];
                    seg.begin = {-1, -1, -1};
                    seg.type = 1;
                } else {
                    seg.type = 1;
                }

            } else {
                segments.push_back(seg);
            }
        } else {
            assert(seg.type == 1);
            int count = 0;
            for (; index < traceback.size(); ++index) {
                if (state[index] == 0) {
                    if (traceback[index].row == 0) {
                        count ++;
                        if (count == 6) break;
                    }
                } else {
                    count = 0;
                }
            }

            if (index < traceback.size()) {
                int count = 0;
                size_t endIndex = index;
                for (; endIndex > startIndex; --endIndex) {
                    if (traceback[endIndex-1].row == 0) count ++;
                    if (count >= 3) break;
                }
                assert(count >= 3);
                seg.begin = traceback[endIndex-1];
                segments.push_back(seg);
                seg.end = traceback[endIndex-1];
                seg.begin = {-1, -1, -1};
                seg.type = 0;
            
            } else {
                segments.push_back(seg);
            }
        }
    }

    for (auto seg : segments) {
        printf("seg: %d %d %d, %s\n", seg.begin.col, seg.end.col, seg.type, ReconstructSimple(seg.begin, seg.end).c_str());
    }

    return segments;

}


AlignmentGraph2::Loc AlignmentGraph2::Locate(const Node& node) {
    for (size_t i = 0; i < cols.size(); ++i) {
        for (size_t j = 0; j < cols[i].Size(); ++j) {
            for (size_t k = 0; k < cols[i][j].Size(); ++k) {
                if (&cols[i][j][k] == &node)
                    return { (int)i, (int)j, (int)k };
            }
        }
    }
    return { -1, 0, 0 };
}

void AlignmentGraph2::Consensus() {
    Segment seg = LinkScore == &AlignmentGraph2::LinkScoreWeight 
        ? FindBestPathBasedOnWeight()
        : FindBestPathBasedOnCount();

    sequence_ = ReconstructSimple(seg.begin, seg.end);
}


void AlignmentGraph2::Consensus2() {
    Segment seg = LinkScore == &AlignmentGraph2::LinkScoreWeight 
        ? FindBestPathBasedOnWeight()
        : FindBestPathBasedOnCount();

    auto areas = SplitSegment(seg.end);
    //Reconstruct(*end, areas);
}

void AlignmentGraph2::AddTarget(const DnaSeq& target, const std::array<size_t, 2> &range) {
    assert(cols.size() == 0);   // It should be empty graph

    target_ = &target;

    cols.assign(target.Size(), Column());
    branches_.assign(cols.size(), nullptr);
    branch_flags_.assign(cols.size(), false);

    Loc prev_loc = { -1, 0, -1 };
    
    for (size_t i = range[0]; i < range[1]; ++i) {
        
        Loc curr_loc = { (int)i, 0, target[i]};
        tags_.push_back({curr_loc, prev_loc, 0});
        prev_loc = curr_loc;
    }    
    
}

void AlignmentGraph2::AddQuery(size_t sid, size_t query_start, const std::string &aligned_query, size_t target_start, const std::string &aligned_target) {
    size_t row = 0;
    int offset_t = (int)target_start - 1;   // move the index to -1 for the first operation ++.
    int offset_q = (int)query_start - 1;
    Loc prev_loc = { -1, 0, -1 };
    bool match = false;
    Loc prev_del_loc = {-1, 0, 0};
    assert(aligned_target.size() == aligned_query.size());
    for (size_t i=0; i<aligned_target.size(); ++i) {

        char base_s = aligned_target[i];
        char base_q = aligned_query[i];
        //if (base_s == base_q && base_s != '-') {
        if (base_q != '-' && base_s != '-') {
            ++offset_t;
            ++offset_q;
            row = 0;
            match = true;
        } else if (base_q == '-' && base_s != '-') {
            ++offset_t;
            row = 0;
            if (i + 1 < aligned_target.size()) {
                char next_s = aligned_target[i+1];
                char next_q = aligned_query[i+1];
                if (next_s == '-' && next_q != '-') {
                    match = false;
                }
            }
        } else if (base_s == '-' && base_q != '-') {
            ++offset_q;
            ++row;
        } else {;
            assert(base_s == '-' && base_q == '-');
            continue;
        }

        assert(base_s == '-' || (*target_)[offset_t] == Base2Num[base_s]);

        if (offset_t < range_[0]) continue;
        if (offset_t >= range_[1]) break;

        if (offset_t >= 0) {   // TODO offset 应该恒大于等于0，但aligned中可能由第三种比对情况，应该在前面trim掉
            //if (!match && row == 0) {
            //    continue;
            //}
            //Loc curr_loc = { offset_t, (int)(row - (match?0:1)), Base2Num[base_q] };
            Loc curr_loc = { offset_t, (int)(row), Base2Num[base_q] };
            tags_.push_back({curr_loc, prev_loc, sid+1});
            prev_loc = curr_loc;
        }
    }
}

static int BranchSizeThreshold(int coverage) {

    auto linear = [](int cov_start, int cov_end, int start, int end, int cov) {
        return int((1.0*end - start) / (cov_end - cov_start) *(cov - cov_start) + start);
    };

    int cov_low = 30;
    int cov_high = 500;
    float rate = 0.2;

    if (coverage < 30) {
        return INT_MAX;         // 使用大整数替代无效值，便于比较
    } else if (coverage >= cov_low && coverage < cov_high) {
        return linear(cov_low, cov_high, cov_low*0.5, cov_high*rate, coverage);
    } else {
        return  coverage * rate;
    }
}

std::vector<const AlignmentGraph2::Link*> AlignmentGraph2::CollectLinks(size_t i) {
    std::vector<const Link*> links;
    for (size_t j = 0; j < cols[i][0].Size(); ++j) {
        for (const auto& l : cols[i][0][j].links) {
            if (l.prev.col != -1) {
                links.push_back(&l);
            }
        }
    }
    return links;
}


std::vector<const AlignmentGraph2::Link*> AlignmentGraph2::CollectLinks1(size_t i) {
    std::vector<const Link*> links;


    assert (cols[i][0].Size() == 5);
    for (size_t j = 0; j < 4; ++j) {
        for (const auto& l : cols[i][0][j].links) {
            if (l.prev.col != -1) {
                links.push_back(&l);
            }
        }
    }

    for (size_t t=1; t < cols[i].Size(); ++t) {
        for (size_t j=0; j<cols[i][t].Size(); ++j) {
            for (const auto &l : cols[i][t][j].links) {
                if (l.prev == Loc {(int)i, 0, 4}) {
                    links.push_back(&l);
                }
            }
        }
    }

    for (size_t j = 0; j < cols[i+1][0].Size(); ++j) {
        for (const auto& l : cols[i+1][0][j].links) {
            if (l.prev == Loc {(int)i, 0, 4}) {
                links.push_back(&l);
            }
        }
    }

    return links;
}


std::vector<const AlignmentGraph2::Link*> AlignmentGraph2::CollectLinks2(size_t i) {
    std::vector<const Link*> links;


    assert (cols[i][0].Size() == 5);
    for (size_t j = 0; j < 4; ++j) {
        for (const auto& l : cols[i][0][j].links) {
            if (l.prev.col != -1) {
                links.push_back(&l);
            }
        }
    }

    return links;
}

void AlignmentGraph2::ComputeSimilarity() {
    assert(cols.size() > 0 );

    //for (size_t i=1; i<cols.size()-1; i++) {  // Skip the first and the last
    for (size_t i=range_[0]+1; i<range_[1]-1; ++i) {
        std::vector<const Link*> links = CollectLinks2(i);
        size_t link_count = std::accumulate(links.begin(), links.end(), 0, [](size_t a, const Link* b) {
            return a + b->count;
        });
        


        int min_coverage = 30;
        if (links.size() >= 2 && (int)link_count >= min_coverage) {
            std::sort(links.begin(), links.end(), [](const Link* a, const Link *b) {
                return a->count > b->count || (a->count == b->count && a->prev < b->prev);
            });

            int branch_threshold = BranchSizeThreshold(cols[i].coverage);

            size_t sz = 0;
            for (; sz < links.size(); ++sz) {
                if ((int)links[sz]->count < branch_threshold) break;    // branch_threshold 可能是无效值
            }

            if (sz >= 2) {
                auto find_link = [&links,sz](size_t id) -> const Link*{
                    for (size_t i=0; i<sz; ++i) {
                        if (links[i]->seqs[id]) { return links[i]; }
                    }
                    return nullptr;
                };

                int qw = 0;
                for (size_t i = 0; i<sz; ++i) {
                    int w = std::max(1, links[i]->prev.row);
                    if (w > qw) qw = w;
                }

                auto tlink = find_link(0);
                branch_flags_[i] = true;
                branches_[i] = tlink;
                for (size_t si = 0; si<scores_.size(); ++si) {
                    int qid = si;
                    if (cols[i].queries[qid+1]) {
                        scores_[si].cross += qw;

                        auto qlink = find_link(qid+1);
                        
                        scores_[si].branches[i] = qlink;
                        if (tlink != nullptr) {
                            scores_[si].t_in_cross += qw;
                        }
                        if (qlink != nullptr) {
                            scores_[si].q_in_cross += qw;
                        }

                        if (tlink  != nullptr && qlink != nullptr) {
                            
                            if (tlink == qlink) scores_[si].q_t_one+= qw;
                            else                scores_[si].q_t_two+= qw;
                        }
                    }
                }
            }
        }
    }

}

double AlignmentGraph2::LinkScoreWeight(size_t col, size_t row, const Link &link) {
    double s = 0;
    double c = 0;
    //if (link.seqs[0]) s += 1;
    for (size_t i=0; i<scores_.size(); ++i) {
        if (link.seqs[i+1]) {
            double diff = (scores_[i].q_t_one + weight_base_)*1.0 / (scores_[i].cross + weight_base_);
            s += diff;
        }
    }
    
    return s-(branch_score_*4/(4+row))*cols[col].weight;

}

double AlignmentGraph2::LinkScoreCount2(size_t col, size_t row, const Link &link) {
    return link.count - cols[col].coverage*(branch_score_*4/(4+row));
}

void AlignmentGraph2::Dump(const std::string &fname, size_t s, size_t e) {

    std::ofstream of(fname);

    of << "Target,Source,Weight,Seqs\n";
    for (size_t i=s; i<e; ++i) {
        const auto& c = cols[i];
        for (size_t ir = 0; ir < c.rows.size(); ++ir) {
            auto &r = c.rows[ir];

            for (size_t ib=0; ib< r.Size(); ++ib) {
                auto &b = r[ib];
            
                for (auto l: b.links) {
                    if (l.prev.col != -1)
                        of << i << "_" << ir << "_" << "ACGT-"[ib] << ", "  
                           << l.prev.col << "_" << l.prev.row << "_" << "ACGT-"[l.prev.base] << "," 
                           << l.count << "," 
                           << l.seqs.to_string() << "\n";
                }
            }
        }
    }

}

} // namespace fsa {
